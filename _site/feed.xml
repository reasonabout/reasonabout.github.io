<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reason About</title>
    <description>Fresh insights and information from a group of full stack students (and their instructors)</description>
    <link>http://reasonabout.co/</link>
    <atom:link href="http://reasonabout.co/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 23 Aug 2016 07:37:28 -0600</pubDate>
    <lastBuildDate>Tue, 23 Aug 2016 07:37:28 -0600</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>Full Disclojure</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: How can I think more like a functional programmer?&lt;br /&gt;
&lt;strong&gt;A&lt;/strong&gt;: You can’t change the way you think. Instead, you should write a function that accepts the way you currently think and returns a new way of thinking which is generated by merging your current way of thinking - excluding non-functional ideals - with functional programming concepts.&lt;br /&gt;
&lt;strong&gt;Q&lt;/strong&gt;: &lt;span style=&quot;font-style: normal;&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;you.forget(i.asked);&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-was-i-thinking&quot;&gt;What Was I Thinking?&lt;/h2&gt;

&lt;p&gt;Recently, I &lt;span style=&quot;text-decoration: line-through;&quot;&gt;was forced&lt;/span&gt; had the opportunity to work on a project with an API written in Clojure. It was exciting to learn something new, but the project didn’t require many updates to the API. As we neared the finish line, it occurred to me that I hadn’t really had a chance to form an opinion on functional programming, and this was probably the last time (at least working for my current company) that I was going to get paid to write in a functional language. So, I decided to build a personal project in Clojure. For lack of an idea for something new to build, I chose to rewrite an API built in Node.js because it had a number of moving parts: database interaction, 3rd-party API integration, o-auth, JWT, and web sockets.&lt;/p&gt;

&lt;h2 id=&quot;kiddie-pool&quot;&gt;Kiddie Pool&lt;/h2&gt;

&lt;p&gt;If there’s any language in which I can claim proficiency, it’s Javascript. On top of that, Node.js has fantastic package management and robust 3rd party support. I didn’t appreciate how much I had taken those libraries for granted until I decided to dive into the Clojure pool.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: Knock, knock.&lt;br /&gt;
&lt;strong&gt;Q&lt;/strong&gt;: A bit of trouble with Javascript promises.&lt;br /&gt;
&lt;strong&gt;A&lt;/strong&gt;: Who’s there?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;adult-swim&quot;&gt;Adult Swim&lt;/h2&gt;

&lt;p&gt;For better or for worse, there isn’t a one-to-one ratio between npm modules and clojars. Part of the problem seemed to be that, when I found a library that claimed to do what I needed it to, I couldn’t understand the example code well enough to get it working. Most of the problem seemed to be that everything I wanted to do required a deeper understanding of the underlying technologies than was previously required of me. So, I gave up and ran away….&lt;/p&gt;

&lt;h2 id=&quot;splashing-around-in-an-effort-to-avoid-drowning-while-pretending-im-swimming&quot;&gt;Splashing Around in an Effort to Avoid Drowning While Pretending I’m Swimming&lt;/h2&gt;

&lt;p&gt;I didn’t run very far before deciding to fight my better judgment and dig a little deeper. Talking to a database, encoding/decoding JSON web tokens, and integrating with my 3rd-party API were a little different than I was used to, but still pretty straight forward.&lt;/p&gt;

&lt;p&gt;The biggest challenges were o-auth and web sockets. I found some libraries that got me part of the way there, but I had to spend a lot of time reading through the official WebSocket spec and Google’s o-auth documentation. Once I decided to let go of finding a Clojure library that would play nice with Socket.io on my front-end, I discovered that setting up a vanilla web socket really isn’t that complicated - at least with Clojure. And the hardest part about Google o-auth is siphoning through Google’s documentation which is somehow both wonderful and garbage.&lt;/p&gt;

&lt;h2 id=&quot;in-clojing&quot;&gt;In Clojing&lt;/h2&gt;

&lt;p&gt;Once you learn how to do something one way, it’s easy to just keep doing things that way. But, there’s something to be said for trail blazing through unfamiliar environments. Even though I haven’t really done anything new, doing familiar things in a new language makes me feel more empowered to solve the new and harder problems that lay ahead. Blah blah rhetoric. Blah blah inspiring words.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;: How many developers does it take to screw in a light bulb?&lt;br /&gt;
&lt;strong&gt;A&lt;/strong&gt;: None. Thats a hardware problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;By &lt;a href=&quot;https://www.github.com/skuttleman&quot;&gt;Ben Allred&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Aug 2016 00:00:00 -0600</pubDate>
        <link>http://reasonabout.co/coding/2016/08/21/bda-clojure-api.html</link>
        <guid isPermaLink="true">http://reasonabout.co/coding/2016/08/21/bda-clojure-api.html</guid>
        
        <category>api</category>
        
        <category>web sockets</category>
        
        <category>oauth</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>Robot Servants</title>
        <description>&lt;p&gt;The sixth months between the time we all get robot servants and the time the robot uprising begins which leads to our inevitable extinction are going to be freakin’ &lt;strong&gt;sweet&lt;/strong&gt;!&lt;/p&gt;

&lt;h2 id=&quot;downside&quot;&gt;Downside&lt;/h2&gt;

&lt;p&gt;Let’s get this out of the way, because I know people are going to bring this up in the comment section: human extinction. Yes, one day robots will rule the earth and destroy humankind. This could be seen as downside. But it’s really the only one.&lt;/p&gt;

&lt;h2 id=&quot;upside&quot;&gt;Upside&lt;/h2&gt;

&lt;p&gt;All the other things!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;No more cooking or cleaning.&lt;/li&gt;
  &lt;li&gt;No more answering your own phone or door.&lt;/li&gt;
  &lt;li&gt;No more having to pick up the remote control to turn on the TV or video game console.&lt;/li&gt;
  &lt;li&gt;No more going to work. Just send your robot.&lt;/li&gt;
  &lt;li&gt;Pretty much no need to ever leave the house (which means no more pants!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Just think about it for a moment. Robot servants seeing to your every need. So what if a few months later robots destroy civilization? Wouldn’t it all be worth it? The answer is “yes”.&lt;/p&gt;

&lt;p&gt;By &lt;a href=&quot;https://www.github.com/skuttleman&quot;&gt;Ben Allred&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jul 2016 00:00:00 -0600</pubDate>
        <link>http://reasonabout.co/general/robots/apocalypse/2016/07/24/bda-robot-servants.html</link>
        <guid isPermaLink="true">http://reasonabout.co/general/robots/apocalypse/2016/07/24/bda-robot-servants.html</guid>
        
        <category>robot uprising</category>
        
        
        <category>general</category>
        
        <category>robots</category>
        
        <category>apocalypse</category>
        
      </item>
    
      <item>
        <title>Impostor Syndrome</title>
        <description>&lt;p&gt;I started my first job as a web developer recently, and I feel compelled to share
the lessons I’ve learned throughout my glorious week-long career.&lt;/p&gt;

&lt;h2 id=&quot;big-kids-table&quot;&gt;Big Kid’s Table&lt;/h2&gt;

&lt;p&gt;I finally made it. I’m seated at the big kid’s table. I’m one of them. I worked hard and it paid off. Now for the hard part: trick everyone into believing that I actually belong here.&lt;/p&gt;

&lt;h2 id=&quot;beginners-mind&quot;&gt;Beginner’s Mind&lt;/h2&gt;

&lt;p&gt;Let’s face it. I don’t know anything. I shouldn’t feel bad, but I do. I could go on and on about all the things I don’t know, but instead I’ll provide you with this handy reference for things I’ve learned that I should and shouldn’t pretend to know when starting a brand new career in web development.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Don’t pretend you like a language that you don’t.&lt;/li&gt;
  &lt;li&gt;Pretend you understand how &lt;em&gt;git&lt;/em&gt; works. (everyone else does)&lt;/li&gt;
  &lt;li&gt;Don’t pretend you know how to use &lt;em&gt;vim&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Pretend you believe that the person sitting next to you knows how to use &lt;em&gt;vim&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Don’t pretend you’d be capable of &lt;strong&gt;anything&lt;/strong&gt; without &lt;em&gt;stackoverflow&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Pretend you know how to turn on the light in the bathroom.&lt;/li&gt;
  &lt;li&gt;Pretend you don’t know who people heard crying in the bathroom earlier.&lt;/li&gt;
  &lt;li&gt;Don’t pretend you know the guy that wrote [&lt;em&gt;name of obscure framework goes here&lt;/em&gt;].&lt;/li&gt;
  &lt;li&gt;Pretend that FP is better than OOP.&lt;/li&gt;
  &lt;li&gt;Pretend that OOP is better than FP.&lt;/li&gt;
  &lt;li&gt;Don’t pretend you’ll survive without your mechanical keyboard.&lt;/li&gt;
  &lt;li&gt;Pretend there was never a time you forgot to wear pants.&lt;/li&gt;
  &lt;li&gt;Don’t pretend the terrible code you wrote isn’t terrible.&lt;/li&gt;
  &lt;li&gt;Don’t pretend the terrible test you wrote effectively tests the terrible code you wrote.&lt;/li&gt;
  &lt;li&gt;Pretend your code will start working if you just close your eyes and wish really hard. (I mean - really, &lt;em&gt;really&lt;/em&gt; hard)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;overcoming-impostor-syndrome&quot;&gt;Overcoming Impostor Syndrome&lt;/h2&gt;

&lt;p&gt;Good luck with that.&lt;/p&gt;

&lt;h2 id=&quot;learning-to-live-with-impostor-syndrome&quot;&gt;Learning to Live with Impostor Syndrome&lt;/h2&gt;

&lt;p&gt;There may never be a time throughout the rest of my career that I will stop feeling like an impostor. With that in mind, I have outlined a few things I like to keep in mind as I continue to fail upwards.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I’m the only impostor at my office. Everyone knows it. For some reason people don’t seem to mind.&lt;/li&gt;
  &lt;li&gt;I can’t speak intelligently about any subject, but my co-workers pretend to value my input.&lt;/li&gt;
  &lt;li&gt;I exclusively write terrible code, but my co-workers seem more interested in building on top of it rather than blaming me for breaking things.&lt;/li&gt;
  &lt;li&gt;I can’t stop my co-workers from pretending that there could be anything I have more experience in than they do.&lt;/li&gt;
  &lt;li&gt;I can’t stop my boss from feeling like I’ll be useful one day.&lt;/li&gt;
  &lt;li&gt;I can’t stop myself from feeling like an impostor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By &lt;a href=&quot;https://www.github.com/skuttleman&quot;&gt;Ben Allred&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Apr 2016 00:00:00 -0600</pubDate>
        <link>http://reasonabout.co/general/2016/04/21/bda-impostor-syndrome.html</link>
        <guid isPermaLink="true">http://reasonabout.co/general/2016/04/21/bda-impostor-syndrome.html</guid>
        
        <category></category>
        
        
        <category>general</category>
        
      </item>
    
      <item>
        <title>Ember Magic</title>
        <description>&lt;p&gt;I started learning Ember about two weeks ago. It’s been an interesting process to figure out how the pieces work together and, in a lot of cases, what the pieces actually are. In this post, I am going to focus on those individual pieces of an Ember project and how they work together. Spoiler: It is probably witchcraft that makes the Ember magic happen. That’s where I’m at right now.&lt;/p&gt;

&lt;p&gt;First, let me just say that Ember is a simple, straight-forward, intuitive MVC that is easy for beginners to jump right into.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Just kidding. That is a ridiculous lie.&lt;/p&gt;

&lt;h2 id=&quot;ember-is-more-like-an-mvrrsabqpxyz&quot;&gt;Ember is more like an MVRRSABQPXYZ&lt;/h2&gt;

&lt;p&gt;For a beginner, Ember can seem overwhelming. There is a lot going on in an Ember project and for the better part of the last two weeks, I’ve been trying to make sense of it.&lt;/p&gt;

&lt;p&gt;Really quickly, I want to give you little more background on where I’m coming from. I’m fairly new to MVCs in general. I’ve built something with Angular, but prior to this Ember adventure I hadn’t really worked with a front-end framework in a way that it was intended. I didn’t separate all of the pieces and Angular let me get away with that. Ember is less forgiving.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/ember-magic/MVRRSABQPXYZ.png&quot; alt=&quot;Ember is crazy!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s not dwell on my personal confusion. Let’s look at an Ember project. If you go to &lt;a href=&quot;https://emberjs.com&quot;&gt;emberjs.com&lt;/a&gt; you will see this at the top of the page and here, I want to point out just how easy it is to get started with Ember. That’s how they get you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/ember-magic/ember-cli.png&quot; alt=&quot;Getting Started with Ember&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first line installs Ember CLI. Ember CLI is a command line interface that helps you work with your Ember project more efficiently. As you start using it, you will quickly get in the habit of generating and destroying parts of your app from the command line rather than from within your app. That was a fairly new workflow for me and it’s definitely something I appreciate about Ember.&lt;/p&gt;

&lt;p&gt;The second line uses Ember CLI to generate an Ember project. What does that project look like?&lt;/p&gt;

&lt;p&gt;It looks like this.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/ember-magic/generated-ember.png&quot; alt=&quot;Getting Started with Ember&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a lot going on here, but if you look closely, you can see that MVC! Just, don’t get too comfortable, because there are a couple things you should be conscious of:&lt;/p&gt;

&lt;p&gt;First, there is a lot more going on here than those three things. Ember is a delicate, integrated ecosystem and those other things are not superfluous. The are necessary.&lt;/p&gt;

&lt;p&gt;Second, Ember is currently undergoing a major evolution and the core pieces of architecture are changing, albeit for the better, but they are changing. The pieces are getting to be more streamlined. For one, controllers are going away and while they’re still here in the standard scaffolding, you don’t even have to use them at this point… but I will get to that. For now, just know that this is your starting point.&lt;/p&gt;

&lt;p&gt;Now, I want to focus on what Ember should look like. I got the fantastic diagram below from a very useful &lt;a href=&quot;http://emberigniter.com/5-essential-ember-2.0-concepts/&quot;&gt;post on Ember Igniter&lt;/a&gt; and I’m going to use it as a reference for the rest of this post.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/ember-magic/core-concepts.png&quot; alt=&quot;Getting Started with Ember&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we go through each piece of it, I want you to notice a couple things.&lt;/p&gt;

&lt;p&gt;One, the router and routes the dominate the scene. Routing is an important part of a single page application. This is going to make sense in a second.&lt;/p&gt;

&lt;p&gt;Two, you may see that there is an alarming lack of controllers and views in this picture. Instead you see these shady looking components at the bottom. I’ll get to those in the next few slides, but for now, know that components are replacing controllers and views in Ember.&lt;/p&gt;

&lt;h2 id=&quot;ember-routing&quot;&gt;Ember Routing&lt;/h2&gt;

&lt;p&gt;Let’s start from the top of the graphic and look at the router. The router manages the application state and if you consider what that means, it makes sense that it seems so important in this diagram. An Ember app is a single page application and that means that it is URL driven. The URL informs the router and lets it know which route to load, which in turn loads the model and renders the template, which for the time being, brings in the components. That’s an important job!&lt;/p&gt;

&lt;p&gt;Here is what a router might look like…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/ember-magic/router-example.png&quot; alt=&quot;Getting Started with Ember&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see that I’m passing route names into the route definitions and I’m generally omitting the paths because Ember is smart enough to route to a URL with the same name. However, in some instances, like where I’m using a dynamic segment in my URL, I’m letting the router know which path to connect with which route.&lt;/p&gt;

&lt;p&gt;These routes that I’m referencing in the router are files that contain logic that can do a few different things. They can render a template, they can load a model that is then available to the template, they can redirect to a new route, or they can handle actions that involve changing a model or transitioning to a new route.&lt;/p&gt;

&lt;p&gt;That last thing has been a little confusing to me. If a route can handle some actions, why not put all of them in there? And if I’m not using controllers, why can’t I just put all of the controller logic into the route. I believe the answer to this is that you could, but it would be wrong. The right way to handle this is with components, which I’ll get to very soon.&lt;/p&gt;

&lt;p&gt;And let’s pause on one other important thing before we move on. Let’s go back to that second item in the list of what route handlers can do. They can load models that are then available to the template. How do they do that?&lt;/p&gt;

&lt;h2 id=&quot;the-model-hook&quot;&gt;The Model Hook&lt;/h2&gt;

&lt;p&gt;Routes have a model hook, which is just a function called ‘model’ that loads the model (and exisitng records) and makes them available to the view. Here is what a route file might look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/ember-magic/route-example.png&quot; alt=&quot;Getting Started with Ember&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this example, I’m using Ember Data, which is a library that handles data on the client side of the application.&lt;/p&gt;

&lt;p&gt;which is using the store service to populate the model, but again, I’m assuming the behind-the-scenes part of this requires frog legs and the eye of newt. The point is this is where you say the magic words and you have access to your model.&lt;/p&gt;

&lt;h2 id=&quot;moving-on-to-models&quot;&gt;Moving on to Models&lt;/h2&gt;

&lt;p&gt;So models. Models are objects that represent the underlying data that your application presents to the user. Being a relatively new developer, I had trouble understanding why you even need models. Why can’t you just get data and send data and figure what to do with it when it got to where it was going? But after spending some time with the framework it started to make sense.&lt;/p&gt;

&lt;p&gt;Here is what an Ember model might look like.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/ember-magic/model-example.png&quot; alt=&quot;Getting Started with Ember&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see that this story model is an object. It has properties and when I get data from my database my model is going to expect that data to have properties that line up with these. I can also use models to define relationships and that will make life a lot easier when I access these records in my view. So that is a model.&lt;/p&gt;

&lt;p&gt;Next, we have components.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/ember-magic/generate-component.png&quot; alt=&quot;Getting Started with Ember&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Components are Like standard Web Components. If you don’t know what those are, they are essentially self-contained, reusable widgets. In Ember these components are made up of a controller (which defines the component’s behavior) and a view (which defines the component’s UI) and, for the time being, these components cannot be routed to directly, so are referenced in templates. Very soon, Ember will make it possible for the router to route directly to components and then we’ll have nice neat nested components.&lt;/p&gt;

&lt;h2 id=&quot;finally-services&quot;&gt;Finally, services!&lt;/h2&gt;

&lt;p&gt;I will just briefly touch on services. These are long-lived Ember objects, meaning that they are &lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;singletons&lt;/a&gt; that can be made available in different parts of your application. They are useful for features that require shared state or persistent connections like authentication, geolocation, web sockets, and a number of other things.&lt;/p&gt;

&lt;p&gt;Remember a couple paragraphs back when I was talking about models and accessing those models with the model route in the hook? Remember when I brought up Ember Data like it was no big deal? Well, Ember Data uses a service called ‘store’ to give you access to your models at a various points in your application. Services are great.&lt;/p&gt;

&lt;h2 id=&quot;but-how-does-the-magic-work&quot;&gt;But how does the magic work?&lt;/h2&gt;

&lt;p&gt;Now you have a general idea about the parts that make up an Ember project, but I haven’t really covered the magic yet. How does it all work together? Honestly, it probably takes well over two weeks to understand all these interactions and I’m not there yet. At this point, this is what I know: A lot of these things are abstracted.&lt;/p&gt;

&lt;p&gt;For example, sending a POST request to an API involves an action inside of a component, a model, a route, a serializer, an adapter and the whole thing is catalyzed with Ember Data’s &lt;code class=&quot;highlighter-rouge&quot;&gt;send()&lt;/code&gt; method. You just tell it to send data and poof, you send data somewhere. I learned over the course of a few days, that if you don’t understand how that magical method works that you may waste some huge number of hours trying to figure why it isn’t working the way you expect it to.&lt;/p&gt;

&lt;p&gt;But this is my life now.&lt;/p&gt;

&lt;p&gt;The point is, that bit by bit, you do uncover Ember’s magic and as you do, you can let Ember do its thing. Eventually this makes building apps a lot easier than the alternative. The strict separation of concerns makes sure that the right pieces go into the right places and that really does give you the ability to build more ambitious apps without worrying about scalability.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Mar 2016 00:00:00 -0600</pubDate>
        <link>http://reasonabout.co/ember/2016/03/23/ek-ember-magic.html</link>
        <guid isPermaLink="true">http://reasonabout.co/ember/2016/03/23/ek-ember-magic.html</guid>
        
        <category>ember,</category>
        
        <category>front-end,</category>
        
        <category>framework</category>
        
        
        <category>ember</category>
        
      </item>
    
      <item>
        <title>Web Components are Neat</title>
        <description>&lt;p&gt;Developers are lazy. At least the good ones are. Beyond that, we have too much to do and too little time. For both of these reasons, we are constantly searching for ways to use less effort to create more results and we do this by finding patterns in the way that we build things. We then use those patterns to invent ways to build those things faster.&lt;/p&gt;

&lt;p&gt;These are some of the reasons that web components exist today and why they’re quickly becoming ubiquitous across the web. They’re still pretty new to me, but let me tell you what I know about them.&lt;/p&gt;

&lt;h2 id=&quot;what-exactly-are-web-components&quot;&gt;What exactly are Web Components?&lt;/h2&gt;

&lt;p&gt;Web components are basically reusable UI elements. Made up of several different technologies, they make it easier for a developer to quickly build applications. This means that anyone can create a component, like a navbar or a search box, once and then use it over and over again with minimal effort. There are also libraries of prebuilt components that are ready to use and easy to customize if need be.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/web-components/legos-and-components.png&quot; alt=&quot;Legos&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-use-web-components&quot;&gt;Why use Web Components?&lt;/h2&gt;

&lt;p&gt;I got right to the laziness issue and I touched on the fact that there isn’t enough time in the world to build everything that we need to build, but what about more concrete reasons?&lt;/p&gt;

&lt;p&gt;Here are a few real problems that web components solve:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Undescriptive markup - Sure, we have HTML5 with its semantic markup that includes articles and asides, but how many of your app’s parts actually fit within the limited vocabulary of this developing standard? With web components, you can name the elements that you are going to use with a name that actually makes sense in your context.&lt;/li&gt;
  &lt;li&gt;Style conflicts - The web component spec takes advantage of the shadow DOM (Which we will get to shortly) so that the scope of each component is isolated. It makes it possible to build more modular apps without the fear of breaking everything with a rogue style definition.&lt;/li&gt;
  &lt;li&gt;No native template standards - We’ve been using all kinds of markup templating solutions and we all have our favorites, but the idea that web components will standardize an easier way to write fast markup will make life easier for everyone.&lt;/li&gt;
  &lt;li&gt;No native bundling - I’ve mentioned that web components are made up of multiple technologies and I’ll get to those in the next section, but for now, know that a web component can effectively bundle HTML, CSS and JavaScript and you can import the entire thing with one simple import statement.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-four-technologies-of-web-components&quot;&gt;The Four Technologies of Web Components&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;templates - define inert reusable markup&lt;/li&gt;
  &lt;li&gt;custom elements - extend HTML&lt;/li&gt;
  &lt;li&gt;shadow DOM - provides encapsulation of markup and styling&lt;/li&gt;
  &lt;li&gt;imports - support bundling html, javascript and CSS files&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Side note: these technologies are not yet supported in all major browsers. Chrome does have full native support and you can use polyfill libraries like &lt;a href=&quot;webcomponents.js&quot;&gt;webcomponents.js&lt;/a&gt; to implement web components in other browsers&lt;/p&gt;

&lt;h2 id=&quot;templates&quot;&gt;Templates&lt;/h2&gt;

&lt;p&gt;In this section, I’m going to introduce the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag, show you how to activate it and how to inject dynamic data.&lt;/p&gt;

&lt;h3 id=&quot;the-template-tag&quot;&gt;The Template Tag&lt;/h3&gt;

&lt;p&gt;This is it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&amp;lt;template&amp;gt; ... &amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
It looks like a regular HTML tag, but it’s special. All markup inside the template tag is inert until it is cloned and utilized on the page. The content is hidden from traditional selection techniques because it is not traversed like other DOM elements. In order to access the elements inside, you have to use the content property of the template.&lt;/p&gt;

&lt;p&gt;You can place the template tag anywhere on the page (head, body, etc.). For example, I might make place a template block that looks like this right after my opening body tag:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&amp;lt;template id=&quot;my-template&quot;&amp;gt;
		&amp;lt;p&amp;gt; I&#39;m coming from a template. &amp;lt;/p&amp;gt;
	&amp;lt;/template&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
To activate the template, I use JavaScript. I need to target and select the template, clone it (meaning copy its content) and then append it to the page. The code would look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	var template = document.querySelector(#my-template);
	var clone = document.importNode(template.content, true); 
	document.body.appendChild(clone);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Passing &lt;code class=&quot;highlighter-rouge&quot;&gt;template.content&lt;/code&gt; in as the first parameter of the &lt;code class=&quot;highlighter-rouge&quot;&gt;importNode&lt;/code&gt; method clones the content of the template. The second parameter of &lt;code class=&quot;highlighter-rouge&quot;&gt;importNode&lt;/code&gt; determines whether it is a deep copy.&lt;/p&gt;

&lt;p&gt;All together now…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&amp;lt;template&amp;gt;
		&amp;lt;p&amp;gt; I&#39;m coming from a template. &amp;lt;/p&amp;gt;
	&amp;lt;/template&amp;gt;
	
	&amp;lt;script&amp;gt; 
		var template = document.querySelector(&#39;#my-template&#39;);
		var clone = document.importNode(template.content, true);
		document.body.appendChild(clone);
	&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;inject-dynamic-data-into-templates&quot;&gt;Inject Dynamic Data into Templates&lt;/h3&gt;

&lt;p&gt;You can inject data before cloning the template’s content by manipulating the template clone. First, you would get a reference to the template, then use &lt;code class=&quot;highlighter-rouge&quot;&gt;document.importNode&lt;/code&gt; to clone the template’s content. Next, change the target element within the template as desired and, finally, append the element to the page. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&amp;lt;template&amp;gt;
		&amp;lt;p&amp;gt;Ducks are &amp;lt;span class=&quot;adjective&quot;&amp;gt;&amp;lt;/span&amp;gt;!&amp;lt;/p&amp;gt;
	&amp;lt;/template
	
	&amp;lt;button onclick=&quot;copyTemplate()&quot;&amp;gt;Copy Template&amp;lt;/button&amp;gt;
	
	&amp;lt;script&amp;gt;
		function copyTemplate() {
			var template = document.querySelector(&#39;template&#39;);
			var clone = document.importNode(template.content, true);
			clone.querySelector(&#39;.adjective&#39;).textContent = &#39;awesome&#39;;
			document.body.appendChild(clone);
		}	
	&amp;lt;/script&amp;gt;	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;		
This code will append this paragraph to the page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	Ducks are awesome!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;custom-elements&quot;&gt;Custom Elements&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/web-components/lego-car.png&quot; alt=&quot;Legos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Custom elements are a newish way of creating your own HTML tags and elements. They are part of web components but can be used on their own and there are a couple ways to implement them. You can either define your own HTML element (note that the name must have a dash -think of the first dash as a namespace) or extend existing elements by adding an ‘is’ attribute. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&amp;lt;input type=&quot;text&quot; is=&quot;search&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;register-and-use-custom-elements&quot;&gt;Register and Use Custom Elements&lt;/h3&gt;

&lt;p&gt;Register and use custom element with a simple three step process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a prototype for the custom element:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var custom-element = Object.create(HTMLElement.prototype);
 //Add properties and functions to prototype here
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;br /&gt;
 Note that when creating new custom elements with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.create&lt;/code&gt; method, the parameter that you pass in will usually be &lt;code class=&quot;highlighter-rouge&quot;&gt;HTMLElement.prototype&lt;/code&gt; since custom elements are derived from a prototype. The exception is when you are extending an HTML element - in that case you would pass that element prototype in as an argument instead.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Register the element via the registerElement method:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;document.registerElement(&#39;custom-element&#39;);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use it: Add to DOM or place tag on the page&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; document.body.appendChild(new customElement());
	
 or 
	
 &amp;lt;custom-comment/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;instatiate-custom-elements&quot;&gt;Instatiate Custom Elements&lt;/h3&gt;

&lt;p&gt;There are four different ways to instantiate a Custom Element&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create a tag in the markup&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;custom-comment /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;new Operator (You would need to append it to the DOM seperately)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var comment = new customComment();
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;createElement&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; var comment = document.createElement(&#39;custom-comment&#39;);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;innerHTML&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; el.innerHTML = &#39;&amp;lt;custom-comment /&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;shadow-dom&quot;&gt;Shadow DOM&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/web-components/shadow-guard.png&quot; alt=&quot;Legos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, we get to the Shadow DOM! How exciting! The shadow DOM provides encapsulation for the JavaScript, CSS and templating in a Web Component. A Shadow DOM makes it so these things remain separate from the DOM of the main document.  A Shadow DOM must always be attached to an existing element.&lt;/p&gt;

&lt;p&gt;Before moving on, take a minute to open the settings in your browser Dev Tools. Under ‘Elements’, click on ‘Show user agent Shadow DOM’. This will allow you to see the shadow DOM of native controls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/web-components/show-shadow-dom.png&quot; alt=&quot;Legos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, before we move on together, let me introduce some vocabulary so we are sure we can be sure that we are speaking the same language.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;light DOM - the standard DOM - what you see on the page&lt;/li&gt;
  &lt;li&gt;shadow DOM - hides away complexity&lt;/li&gt;
  &lt;li&gt;logical DOM  - umbrella term that covers both light and shadow DOM&lt;/li&gt;
  &lt;li&gt;shadow root - the root node of a shadow tree&lt;/li&gt;
  &lt;li&gt;shadow host - the element in the light DOM that hosts the shadow DOM&lt;/li&gt;
  &lt;li&gt;shadow boundry - 	encapsulates styling rules that are defined within a given piece of the shadow DOM (there are some ways to get around this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Got that? Great. Let’s create a Shadow DOM.&lt;/p&gt;

&lt;h3 id=&quot;create-a-shadow-dom&quot;&gt;Create a Shadow DOM&lt;/h3&gt;

&lt;p&gt;It’s another three step process:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select a shadow host&lt;/li&gt;
  &lt;li&gt;Create a shadow root&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add elements (the same way that you append elements to the light DOM)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;template&amp;gt;
     &amp;lt;h1&amp;gt;Hello world from the shadow DOM&amp;lt;/h1&amp;gt;
 &amp;lt;/template&amp;gt;
	
 &amp;lt;div id=&quot;host&amp;gt;
     &amp;lt;script&amp;gt;
         var host = document.querySelector(&#39;template&#39;);
         var root = host.createShadowRoot();
         root.appendChild(document.importNode(template.content, true));
     &amp;lt;/script&amp;gt;
 &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
As the Shadow DOM encapsulates its own elements and their styles, regular styling will not work on the shadow DOM. You can, however, define styles within the template tag that will only affect the shadow DOM. JavaScript, on the other hand, is not encapsulated in the Shadow DOM. Any Javascript that is defined within the tempate tag will still be traversed and manipulated with the light DOM and be attached to the window element. The markup inside the shadow DOM is still protected from JavaSript manipulation because it cannot be traversed with traditional selection methods. You can use IIFEs to encapsulate code.&lt;/p&gt;

&lt;h2 id=&quot;imports&quot;&gt;Imports&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ek/2016/03/web-components/lego-imports.png&quot; alt=&quot;Legos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Both templates and imports are a way to store inert HTML, but imports have two unique qualities:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;They support storing HTML in another file&lt;/li&gt;
  &lt;li&gt;They support bundling HTML, CSS and JavaScript&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;using-imports&quot;&gt;Using Imports&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	&amp;lt;link rel=&quot;import&quot; href=&quot;component.html&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
This code brings in everything that is in the  ‘import location’ identified by the href attribute in the link tag. Imported HTML is inert until you clone it onto the page. Imported JavaScript and CSS are applied immediately	.&lt;/p&gt;

&lt;h1 id=&quot;now-what&quot;&gt;Now What?&lt;/h1&gt;

&lt;p&gt;This was just the beginning. Hopefully you have a better understanding of what a web component is and what it’s made of. There is a lot more studying to.&lt;/p&gt;

&lt;p&gt;Check out these resources for more info:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components&quot;&gt;MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://webcomponents.org/&quot;&gt;WebComponents.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.polymer-project.org/1.0/&quot;&gt;Polymer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have you used web components in any of your projects? What has your experience been?&lt;/p&gt;

</description>
        <pubDate>Sun, 20 Mar 2016 00:00:00 -0600</pubDate>
        <link>http://reasonabout.co/web-components/2016/03/20/ek-web-components.html</link>
        <guid isPermaLink="true">http://reasonabout.co/web-components/2016/03/20/ek-web-components.html</guid>
        
        <category>web</category>
        
        <category>components,</category>
        
        <category>polymer</category>
        
        
        <category>Web-Components</category>
        
      </item>
    
      <item>
        <title>O(n) to the next</title>
        <description>&lt;h2 id=&quot;on-to-the-next&quot;&gt;O(n) to the next.&lt;/h2&gt;
&lt;p&gt;An intro to big O notation.&lt;/p&gt;

&lt;p&gt;What is the big O? For a programmer, big O is a notation used to establish the efficiency of a given function. By simply knowing seven different types of big O’s and how they relate with each other you can figure out the performance cost of pretty much any code set. Big O is based on upper limits, meaning if we are counting the possible outcomes of a scenario it only cares about the worst case scenario. Which means coders can control the “cost” of their app simply by choosing one type of function over another.&lt;/p&gt;

&lt;h3 id=&quot;the-seven-sisters&quot;&gt;The seven sisters&lt;/h3&gt;

&lt;p&gt;So what are the seven big O’s?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Constant - O(1)
&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Logarithmic - O(logn)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Linear - O(n)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Linearithmic - O(n logn)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Polynomial - O(n^2)
&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Exponential - O(2^n)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Factorial -O(n!)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ds/2016/03/complexity.png&quot; alt=&quot;Current Directory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Umm, WTF David….
Ok, I’m sorry. I said all you needed to know was those seven things but I’m sure they make no sense at this point if you have never seen them. Not to mention its syntax is reminiscent of daily bouts of second period math anxiety, pop tarts and the smell of the weird kid that sat next to you. Perhaps a slightly closer look at each will dissolve some of that anxiety. So to those of you that didn’t hit the back button as soon as I started mashing numbers with letters, thank you. Now prepare to dive into the crazy world of upper limits. Hold onto your butts. . .&lt;/p&gt;

&lt;h3 id=&quot;constant&quot;&gt;Constant&lt;/h3&gt;

&lt;p&gt;The first sister, Constant is pretty straight forward. Since big O is used by programmers to evaluate the worst case scenario for performance of a function, the constant represents a scenario where there is only a set possible outcome. Meaning if we have a sorted array of colors &lt;code class=&quot;highlighter-rouge&quot;&gt;[red, blue, green, yellow, orange]&lt;/code&gt; and we want to select yellow, it would take only once to select yellow since it is in the fourth spot of the array we can select it by its position. This is the fastest possible performance.  It is practically instantaneous.&lt;/p&gt;

&lt;h3 id=&quot;logarithmic&quot;&gt;Logarithmic&lt;/h3&gt;

&lt;p&gt;As the second sister, Logarithmic sits right on the shoulders of her other sister. The two when graphed are so similar that you can not physically tell a difference. Mathematically there is an obvious distinction. With &lt;code class=&quot;highlighter-rouge&quot;&gt;O(logn)&lt;/code&gt; we are dealing with binary evaluating a sorted array with a binary search or a balanced search tree, as well as all operations in a binomial heap. Ok I know, total WTF moment again and I apologize. That was the technical definition. What does that mean in terms that we normal human beings can understand? I will do my best to translate. Simple definition, &lt;code class=&quot;highlighter-rouge&quot;&gt;O(logn)&lt;/code&gt; deals with data sets similar in example to a sorted binary tree and the worse case scenario of selecting an item from that tree. Even simpler: Binary tree just means a tree graph in which any one node (piece of data, represented by the circles) can only have only one parent, one sibling and up to two children.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ds/2016/03/btree.png&quot; alt=&quot;Current Directory&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Why is this &lt;code class=&quot;highlighter-rouge&quot;&gt;O(logn)&lt;/code&gt; and how is it basically the same graphically as &lt;code class=&quot;highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;? Selecting an item from a sorted binary tree graph is a lot like taking a whole pie and cutting it in half and figuring out which half you want to keep, then you cut the half you kept into quarters and decide which quarter you want to keep and then again into eighths and continue until you have found the pie size you want. With binary trees if you want the bigger half you evaluate to the right and if you want the smaller piece you evaluate to the left.&lt;/p&gt;

&lt;p&gt;Consider the tree graph above. If we wanted to select the number seven we would first start at the top and evaluate if eight is the number we were looking for. It is not so next check to see if eight is greater than or less than seven (the number that we are trying to select). Since the number seven is less than eight, we will know that seven must exist on the left side of the tree so we evaluate the left child. Seven is greater than three however so we will evaluate its right child which in this case is six. Since seven is greater than six we evaluate to the right and find seven, the node we wanted. This type of computation is the second most performant and also practically instantaneous.&lt;/p&gt;

&lt;h3 id=&quot;linear&quot;&gt;Linear&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; is the first middle sister and she comes with the popularity to prove it. Linear computations are extremely common in programming. One of the first functions people learn when beginning to code is a for loop. If you have done this, you have done a linear computation. Graphically speaking, linear means a constant slope or a steady rise over run. Ringing some dusty bells? From a programming perspective we make an equation whose worst possible performance outcome increases at a steady rate. For loops are a great example of a linear computation because it literally is saying “for every (blank) do (blank) which computationally says giving n number of items the worst possible outcome would be n number of times. More clearly &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; means if we wanted to select an item from an unsorted array where the worst possible outcome would be having to check every item in the array before you found the one you want. If we were looking for seven in this array it would take us looking through every number before we found seven &lt;code class=&quot;highlighter-rouge&quot;&gt;[1,5,3,9,8,4,6,2,7]&lt;/code&gt;. I guess by that definition, finding my keys tends to be a O(n) computation because they always seem to be in the last place I look.&lt;/p&gt;

&lt;h3 id=&quot;linearithmic&quot;&gt;Linearithmic&lt;/h3&gt;

&lt;p&gt;As the second middle sister, Linearithmic is an interesting one. She challenges the world to look differently, to see how interaction with others can have an affect. Linearithmic computations are the first on the compounded computations. This just means that you are doing more than one computation and you are looking at the multiplication of those computations. An example of this would be if you had a for loop &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; and inside of that for loop you were checking every time for a specific node in a binary tree &lt;code class=&quot;highlighter-rouge&quot;&gt;O(logn)&lt;/code&gt; we would express this mathematically as &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n) * O(logn) = O(n logn)&lt;/code&gt;. It is important to note that this is the world that sorts live in. For more on sorts or any questions feel free to reach out to me.&lt;/p&gt;

&lt;h3 id=&quot;polynomial&quot;&gt;Polynomial&lt;/h3&gt;

&lt;p&gt;Let’s affectionately refer to her as Poly. Poly learned from her big sis Linearithmic. Poly understood the importance of knowing the relationship between multiple &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; computations. This is much like with Linearithmic computations but instead of multiplying &lt;code class=&quot;highlighter-rouge&quot;&gt;O(logn)&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; we are multiplying &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt; to other &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;’s. Mathematically it looks like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n) * O(n) = O(n^2)&lt;/code&gt;. Reference the complexity graph above and look for the teal colored line. That my friends, is Polly. Since she grows at an exponential rate, the number of computations per element &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; reaches an unstable quantity pretty quickly. At about thirty elements, &lt;code class=&quot;highlighter-rouge&quot;&gt;n = 30&lt;/code&gt;, you have to do nine hundred computations and at &lt;code class=&quot;highlighter-rouge&quot;&gt;n = 40&lt;/code&gt; we have to make sixteen hundred computations. Increases like that are BAD for computers, you want to limit these kind of algorithms as much as possible. An example of a &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n^2)&lt;/code&gt; equation would be a nested for statement.&lt;/p&gt;

&lt;p&gt;Grab your totems cause we are about to get all Inception on this. Imagine a for statement within a for statement. That would be &lt;code class=&quot;highlighter-rouge&quot;&gt;n^2&lt;/code&gt;. If you went another layer deeper you get a for loop within a for loop within a for loop or &lt;code class=&quot;highlighter-rouge&quot;&gt;n^3&lt;/code&gt; and so on and so forth. At &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n^3)&lt;/code&gt; or three nested for loops, when &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; is 100 we would need to make a million computations in the worst case scenario to find the item we want. This sounds like a lot, do a million math problems? Ef that. The computer however can do that many computations pretty quickly depending on the speed of the computer. For instance, ever wondered what the numbers on a processor spec means? Ever bragged about your computer or phone “well my new phone is the (some phone) and it has a (some number) Ghz processor”. What you are bragging about is the amount of computations your device can make. G refers to gigs and hz means per second. Gigs is short for gigabyte or one billion bytes, eight bits to a byte and each can be represented as a computation. So for a device with a 1.2 Ghz processor and a x64 processor, it theoretically can handle &lt;strong&gt;76.8 billion computations per second!&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;exponential--factorial&quot;&gt;Exponential &amp;amp; Factorial&lt;/h3&gt;

&lt;p&gt;Computers these days are fast, but they all do have limits. Exponential and Factorial are fraternal twins and the babies of the family. They are generally not enjoyable to deal with, think . These computations break those limits very very quickly. The expressions themselves have limits as well. We call those limits to infinity or the limit as, in this case number of computations, approaches infinity. If you look again to the complexity graph, look for the orange and the sky-blue lines. Those are the exponential and factorial graphs. See how the lines go basically vertical? The vertical lines just get infinitely closer to perfectly vertical but never quite reach it. The interesting thing about these kinds of computations is that in theory, no computer in the world no matter its performance could compute exponentially or factorially beyond a certain number and we can see that visually on the graph. Writing code that uses either of these computations would be volatile and not recommended. Luckily we would rarely see this kind of computation in programming.&lt;/p&gt;

&lt;p&gt;Thank you for checking out my blog on big O notation. If you have any questions, corrections or just wanna nerd out with me feel free to contact me. Also if you have requests for a specific blog topic I will try to get to it.&lt;/p&gt;

&lt;p&gt;-&lt;a href=&quot;davidjshibley@gmail.com&quot;&gt;David Shibley&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;davidjshibley@gmail.com&quot;&gt;Email&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://twitter.com/D_Shibs&quot;&gt;@D_Shibs&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://www.linkedin.com/in/davidshibley&quot;&gt;in/David-Shibley&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Mar 2016 00:00:00 -0700</pubDate>
        <link>http://reasonabout.co/meta/2016/03/02/ds-on-to-the-next.html</link>
        <guid isPermaLink="true">http://reasonabout.co/meta/2016/03/02/ds-on-to-the-next.html</guid>
        
        <category>Galvanize</category>
        
        
        <category>meta</category>
        
      </item>
    
      <item>
        <title>Drinking from a fire hydrant</title>
        <description>&lt;h2 id=&quot;thirsty-heres-a-fire-hydrant&quot;&gt;Thirsty? Here’s a fire hydrant.&lt;/h2&gt;
&lt;p&gt;A story of how I fell in love with programming.&lt;/p&gt;

&lt;h3 id=&quot;i-love-to-code&quot;&gt;I love to code.&lt;/h3&gt;

&lt;p&gt;….but this wasn’t always the case. I come from an abandoned portion of Los Angeles county that is affectionately referred to as “The Armpit of California”. My family was not rich by any means but we still managed to get by. I grew up influenced by all the things a white kid in the ghettos of L.A. would be influenced by. I loved Eminem. Believed success could be represented by a currency symbol and the nice guy finishes last and alone. My childhood dream of being a teacher was squashed by a culture that taught that teachers were unsuccessful people and I should idolize famous people. So how did a confused white kid from the same town as Afroman fall in love with programming?&lt;/p&gt;

&lt;h3 id=&quot;the-unforeseeable-future&quot;&gt;The Unforeseeable Future&lt;/h3&gt;

&lt;p&gt;“I am not and will not ever be, a computer nerd” I am sure I have said at some point in the past, if not I’m sure I thought it. Once, my high school calculus teacher told me to go into programming because of my love for videos games and my ability to keep up in her class… to which I believe I said something like  “Yeah, not my thing sorry, thanks though.” I mistakenly had this belief that in order to be a coder you had to meet the following criteria: eat cheese puffs; drink diet coke; be fat; pimply; greasy; white; male; live in mom’s basement; have no relationships and no hobbies. Unfortunately, as a seventeen year old boy born and raised in southern California, this is what my culture taught me programming equated to. I also had this sad misunderstanding that software and hardware was interchangeable and if you knew one you knew the other. Then in college I studied Environmental Science at Humboldt State University. For those of you unfamiliar with what that implies, it is one of the Hippy-est of Hippy-sciences… at the Harvard of Hippy-Schools. At this point in my life there was no visible connection that would have shown a path leading to where I am today. Fast forward three jobs, four deaths, three romantic relationships and eight years later and we get&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(Denver, Code) =&amp;gt; Love&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During those eight years I spent some years in college, some years pursuing an entrepreneurship and some years climbing the corporate ladder.  None of which lead me to happiness. I wasn’t sure where I would find happiness but it didn’t seem to be in any of the directions I went. I came to believe the missing element was art. I wasn’t happy because I hadn’t found my art form yet. I was never very good musically, I enjoyed writing but never to a point that I obsessed about it or it brought me great joy. The closest thing I had found to art at this point was bartending. I could craft drinks tailored to people and it was much like art, but it never said “with this, I can change the world”. Then I found my artform, it was programming. With programming I could build something from nothing, I could bring to life a thought, a vision, an idea. I felt like a wizard; give a specific command and make something happen in a seemingly magical manor.&lt;/p&gt;

&lt;h3 id=&quot;the-ignition&quot;&gt;The Ignition&lt;/h3&gt;

&lt;p&gt;Thanksgiving, 2014: I have a conversation with my uncle about my future. I tell him I have no idea where I want to go but I know I want to go back to school. I don’t however know what I want to study. He tells me about MOOCs (massive open online course) in which I can take archived online classes from major schools. The beauty for me was being able to sample classes from varying fields of study without having to invest any money or any set amount of time. I could start taking the class and if it didn’t grab my attention I could just stop the class and move on till I found a class that did. Luckily for me, I found a class that did and did it ever.&lt;/p&gt;

&lt;p&gt;At the time I would sit outside in the garage in the mornings with the door up watching the world through my driveway while I study on my computer. One morning I began a class at about ten o’clock. The next thing I knew, my girlfriend was hollerin’ at me to come in for dinner. It was seven thirty in the evening. This class was “Intro to Computer Science”. A class that culminates in building a web crawler in python. To me, I had just built Google. From that moment on I was hooked. I took every CodeAcademy course I could, started reading Eloquent JavaScript (totally didn’t understand it) and started trying to find out what else was out there.&lt;/p&gt;

&lt;p&gt;After a few months of doing this, I had built up a pretty good intro base of conceptual knowledge, but I didn’t actually know how to build anything or how everything fit together. It would be like knowing that a toaster toasts bread and you toast bread by inserting the bread and pressing the handle down. Seperately you know that an outlet provides power to electrical devices, but not knowing that you have to plug the toaster into the outlet. It seems so simple once you know it, but until then you don’t know what you don’t know.&lt;/p&gt;

&lt;p&gt;I visited Colorado in May of 2015. I had a friend I stayed with that was a freelancer in Denver. He advised me to look into developer bootcamps and pick a city with one that I wanted to work in. I was living in Denver by August.&lt;/p&gt;

&lt;h3 id=&quot;the-present&quot;&gt;The Present&lt;/h3&gt;

&lt;p&gt;So here I sit, perched in my favorite computer chair chattering away on the keys of my Mac listening to peaceful acoustic music and looking out the window at the vast beauty of the state of Colorado. I know I need to rest my mind from code for a day, I just have to. You get to a point where your brain just gives up. I am not at that point yet, but I know what’s coming next week and I will need all the rest I can get. I go to school at Galvanize and attend the Full Stack program. The program is a full stack web developer immersion bootcamp where students learn to build sophisticated and quality modern web applications. In addition to the how to’s of building apps, students also are required to learn many other skills that are associated with web development. These things range from soft skills like continuous integration/continuous deployment and working on teams using a story tracker and agile methodologies to hard skills like being fully capable of applying our conceptual knowledge of javascript to an unfamiliar environment.&lt;/p&gt;

&lt;h3 id=&quot;the-impossible&quot;&gt;The Impossible&lt;/h3&gt;

&lt;p&gt;Our first experience into unfamiliar environments (for some of us the whole program was one big unfamiliar environment) went something like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Teacher: “Here’s the code for a live working Ruby on Rails app. Add a feature and fix a bug by the end of the day.”
Go.        &lt;br /&gt;
Class: “(insert vulgar word or phrase of choice here)”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Mind you the class had never seen rails code. It also was on a day when it snowed more than a foot in Denver and everyone was attending class remotely. The teachers also all agreed to not answer our messages in slack or help with the assignment in order to really shock and scare us. The purpose was to get that fear out of the way now, while in a safe environment and not on day one of our new jobs, where more than likely we won’t be coding in only javascript and freak out on people whom our paychecks depend on their approval. Much to the surprise of the instructors and probably even more surprise to ourselves, we did make a feature… All of us. In 8 hours we each taught ourselves ruby on rails using only a sample of working code and google searches. Rock on, as lead instructor Kyle would say. Since then we have all built small apps and servers in different languages like swift/xcode, java, go, python, C#. We even built wonderful group projects with unfamiliar environments like building native ios and android apps in addition to their web app. Some even hacked a chest freezer and connected a raspberry-pi with a socket connection to a server that allows users to adjust the temperature from their phones and can pre-program set times and temps of the freezer for the purpose of home brewing. This was all done in only four days of building with only four months of education. This class is unbelievable in the truest sense of the word.&lt;/p&gt;

&lt;p&gt;It is difficult to comprehend the progress that is achieved throughout the course. The idea that anyone could go from being really good at making a martini to building one of those projects is not an easy thing to understand. Galvanize changes you. Its that simple, yet so complex. I think of Galvanize as being to the mind as Biggest Loser is to the body and what both are to the soul. My approach to life has changed, the way I understand problems is different, the way I spend my time, the things I love or find amusing, even my personality: the embodiment of my expressed self has been altered due to my time at Galvanize. Have you ever heard this: “If you want to learn (some language) you should just move to (some country), I promise you will learn it in just a few months”? If you have heard you will relate and if you have done it you will understand, coding is the language and Galvanize is the country of origin. Galvanize is fully immersive. By that I mean you live and breathe code. I ate, drank and slept Galvanize and code. Quite literally. Eat: Often I have had to rely on snacks provided by Galvanize and their wonderful staff because I’m either too immersed or just plain broke. Which is the perfect time to shout out to the people that keep everyone comfy, Russ and Chana, you guys are the cherry on the top of the sundae that is Galvanize. On behalf of everyone in the building, Thank You.
Drink: Galvanize also provides you with much needed unlimited coffee and tea to keep you going, not to mention a free beer or two at the end of the work day when you need it.
Sleep: My car got stuck in the Highlands late one night after the last train had already left, so ended up sleeping on a couch in the building.&lt;/p&gt;

&lt;h3 id=&quot;the-unexpected&quot;&gt;The Unexpected&lt;/h3&gt;

&lt;p&gt;They do allow you freedom do as you please though, it’s not like a prison camp. You only commit to nine to five, but everyone codes much longer. Some leave campus right at five and code at home, many have kids they need to pick up or dogs that have been waiting for them, but many of us will code late into the night… every night. The craziest thing is that from an outside perspective I’m sure this might sound terrifying. Tortuous challenges and endless work, no life, no family no friends no games no FUN?!.. Twisted and demented as it sounds, we have loads of fun. I believe the long nights are actually due in part to the fun, without it there is no endurance for that kind of focus.&lt;/p&gt;

&lt;p&gt;As previously mentioned Galvanized changed what I found to be entertaining and building cool stuff and solving difficult challenges became the fun. Think people who enjoy sitting down to a five hundred piece puzzle. They think it’s fun to try to solve the puzzle and determine the relationship and location of each piece. That’s a lot like how we spend our time but we take a hundred piece puzzle which in turn is a piece of a much larger twenty piece puzzle and try to solve it in a day. Then we come back in the next day and dump the puzzle on the ground and try to do it again. Sometimes for fun and sometimes, because we are told to. If you ever played with lego blocks image spending all day building a really cool castle and a big-kid comes in and kicks it to pieces and yells at you to make it with red blocks now. Or spending multiple days building a complicated city with different buildings and roads and all.. and the big-kid stomps through and demands skyscrapers. The great part of it is that you begin to learn that the big-kid is a welcomed presence. For instance, you now know how to build skyscrapers. Though I say all that in jest, the instructors are not bullies. They are not, as the etymology of bootcamp might suggest, drill sergeants either. They are wonderful people who genuinely care about the success of their students. They inspire enduring greatness and often see it to fruition.&lt;/p&gt;

&lt;h3 id=&quot;the-reflection&quot;&gt;The Reflection&lt;/h3&gt;

&lt;p&gt;On behalf of the class I’d like to thank Kyle and his team for their impact on my life. To the class, you inspired me the most. When I was at my most uncertain moments, I would be reminded by one of you where I was truly at in the course. I hope I was able to inspire the same in some of you.&lt;/p&gt;

&lt;p&gt;-David Shibley&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Feb 2016 00:00:00 -0700</pubDate>
        <link>http://reasonabout.co/meta/2016/02/29/ds-drinking-from-a-fire-hydrant.html</link>
        <guid isPermaLink="true">http://reasonabout.co/meta/2016/02/29/ds-drinking-from-a-fire-hydrant.html</guid>
        
        <category>Galvanize</category>
        
        
        <category>meta</category>
        
      </item>
    
      <item>
        <title>Design Matters</title>
        <description>&lt;p&gt;Monday through Friday and on some weekends you sit down in the morning with a cup of coffee, and convert the caffeine into code. Am I right? Ok some of you developers don’t drink coffee or whatever, but you get my point; you spend a good deal of time arranging symbols, letters, and numbers into instructions that can be interpreted by machines. I want to bring something to your attention. It is… (drum roll please) design! At this point some of you may be rolling your eyes, and probably at least 10% of you stopped reading this altogether. My question to you is; what do you think about design?&lt;/p&gt;

&lt;p&gt;a)It’s idiotic, vapid, and ephemeral.&lt;/p&gt;

&lt;p&gt;b)Not my problem&lt;/p&gt;

&lt;p&gt;c)Just use bootstrap&lt;/p&gt;

&lt;p&gt;d)I’ll design my fist into your face.&lt;/p&gt;

&lt;p&gt;I have some bad news for you. If you answered with any of the above responses then you’re wrong. I have some more bad news for you, if you are a developer then you are a designer. I know, I know it’s a lot to comprehend, you spent your entire life hating designers, with their stupid black half turtle neck shirts, horn rimmed glasses with nonprescription lenses, ugly hipster haircuts, and worn vintage shoes that they spent half a years salary on. How could you be one of them? You’re beard isn’t even ironic it’s just a beard. Can this be true?&lt;/p&gt;

&lt;p&gt;Yes it’s true, because design isn’t just a cliche, it isn’t css, or wireframes, design is everything. Design is how software works, its logic, its feel, how a user interacts with it. If you didn’t care about design before you need to care now. One of my pet peeve’s is when I hear developers say design is just a feature, and if we get to it we’ll deal with it, but if not no big deal. Wrong, wrong, and need I say it? wrong!! Technically they are correct when saying design is a feature but, they are very wrong in assuming it is ok to be neglected. Design is in my opinion (which is the correct one if you were wondering) the single most important aspect of any product. Let’s take a trip to metaphor land where I’ll paint a lucid portrait for you to understand this concept better. let’s assume you’re building an airplane, it’s your job to build the engines. You need to make some design decisions. How much thrust do you need? How is that thrust going to be generated? Based on the bhp produced by a single engine how many engines do you need? Is the plane being built for commercial, private, or military use? you get the idea. every decision you make matters, and it all comes down to design. You would’t put props on a 747 right? One thing that people need to erase from their brains right now is that design is just aesthetics. Or it’s just kids stuff only seen on the surface. Design is every decision you make when building a product.&lt;/p&gt;

&lt;p&gt;The main thing you need to understand is that design, and development, aren’t opposing forces, and they aren’t two different things, they are one in the same. I know a lot of people would be outraged by this, and say “I’m a developer not some artsy fartsy type” Yes I will acknowledge some of you couldn’t tell me that puke green, and poop brown look bad together, but this is only a mere fraction of design.&lt;/p&gt;

&lt;p&gt;How do you tell if something is designed well? One of the main signs is if you fail to notice the design. If it has been implemented well, and everything flows the design is the last thing on your mind. You’re busy interacting with a piece of software and the only thing you notice is the software doing what you want. It’s like the airplane in the earlier metaphor I’m sure you’ve probably flown on many airplanes, but can you tell me anything about them? How much thrust they generated what their fuel capacity was, or their max altitude? probably not because this was the aspect of the planes that was designed well by expert engineers. What is more likely is that you noticed the poor design of a commercial plane. Uncomfortable seating, no leg room, no overhead space etc. This isn’t to say that all good design is unnoticeable because it’s not. It just so happens that with software that tends to be the case.&lt;/p&gt;

&lt;p&gt;If you’re still wondering why you should care about design let me give you a bit more insight. The design of a product determines the overall quality, usability ,and ultimately it’s worth. Please direct your attention to the following exhibits.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ab/2016/02/chair.jpg&quot; alt=&quot;Exhibit A.&quot; /&gt;		
Exhibit A.		
&lt;img src=&quot;/assets/ab/2016/02/eames.jpg&quot; alt=&quot;Exhibit B.&quot; /&gt;
Exhibit B.&lt;/p&gt;

&lt;p&gt;In Exhibit A we have a hideous abomination that is basically unusable, and in Exhibit B we have a timeless Herman Miller Eames chair. Which piece of software would rather develop? Exhibit A. or a gorgeous, refined, useful Exhibit B. To beat a dead horse I’ll wrap up with some final thoughts.&lt;/p&gt;

&lt;p&gt;1.Design matters&lt;/p&gt;

&lt;p&gt;2.Design makes software useful (Credit goes to Mr. Rams for that one)&lt;/p&gt;

&lt;p&gt;3.If you’re a developer you’re a designer&lt;/p&gt;

&lt;p&gt;4.Better design leads to better products&lt;/p&gt;

&lt;p&gt;5.Design and development go together better than Hulk Hogan, and a red speedo brother!!&lt;/p&gt;

&lt;p&gt;By &lt;a href=&quot;https://crackling-torch-8333.firebaseapp.com/&quot;&gt;Addison Bennett&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 11 Feb 2016 00:00:00 -0700</pubDate>
        <link>http://reasonabout.co/design/2016/02/11/ab-design-matters.html</link>
        <guid isPermaLink="true">http://reasonabout.co/design/2016/02/11/ab-design-matters.html</guid>
        
        <category>Galvanize,</category>
        
        <category>design,</category>
        
        <category>software</category>
        
        
        <category>design</category>
        
      </item>
    
      <item>
        <title>How To Become A Super Famous Programmer in Seven Minutes, or Making Your First Open Source Contribution</title>
        <description>&lt;p&gt;On my bus ride home, I like to zone out and read the New York Times on my phone. But what about all those typos! I mean, how does that even happen? It’s the New York frickin’ Times!&lt;/p&gt;

&lt;p&gt;The best I can do is send out &lt;a href=&quot;https://twitter.com/billyzacsmith/status/693249645124784128&quot;&gt;a hopelessly ineffectual tweet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But here’s one thing open source software has over the newspaper of record: when you run across something that’s broken, you can actually fix it! For serious! You, little old you, can actually fix the thing that bajillions of people use. Wow!&lt;/p&gt;

&lt;p&gt;Let me tell you about a thing that happened yesterday. I was teaching myself Ruby on Rails, reading through the official documentation on their site. And there it was: a typo! Somebody totally forgot to put in an apostrophe! Whaaa! How is this even possible! I mean, this is &lt;em&gt;the&lt;/em&gt; Ruby on Rails?!?!&lt;/p&gt;

&lt;p&gt;But then I remembered, hey, this is Open Source software! I can fix this!&lt;/p&gt;

&lt;p&gt;Here’s how it works:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find the repository for the project on GitHub and fork the repo. &lt;img src=&quot;/assets/zs/2016/02/fork.png&quot; alt=&quot;Fork&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt; it down to your computer.&lt;/li&gt;
  &lt;li&gt;Make the change on your version.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt; it with a nice message. It seems to be pretty standard to write “Fix typo.” Here’s what not to do: When I fixed a typo in the Angular docs, I wrote “Fixed up a tiny little typo, that wasn’t so bad, but, ya know, jus’ trying to help out, LOLZ!” They were like, “Um, yeah. Thanks for your contribution.” So just keep it short and not overly sweet.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt; it to your repo. Now your changes are published to GitHub. We just need to notify the folks who manage the original repo. That’s what pull requests are for.&lt;/li&gt;
  &lt;li&gt;Click “Make pull request.” &lt;img src=&quot;/assets/zs/2016/02/pull-request.png&quot; alt=&quot;Pull request&quot; /&gt; You’ll be prompted to review your change. Click the obvious stuff, and that’s it!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On these big projects, like Rails, there seems to be someone tasked with reviewing these little pull requests. They’ll take a look, and if they like your proposed change, they’ll merge it into the master code base. You’ll see something like this:
&lt;img src=&quot;/assets/zs/2016/02/pull-request-merged.png&quot; alt=&quot;Merge notification&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Soak in the fame! Eat glory like it’s triple-stacked pancakes!&lt;/p&gt;

&lt;p&gt;But in all seriousness, this is a good way to warm up to making contributions to real software. Plus, it’s good practice for when they open source the New York Times.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Originally published on &lt;a href=&quot;http://billyzac.github.io/2015/02/03/how-to-become-a-world-famous-programmer.html&quot;&gt;billyzac.github.io&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Feb 2016 00:00:00 -0700</pubDate>
        <link>http://reasonabout.co/meta/2016/02/03/zs-how-to-become-a-super-famous-programmer.html</link>
        <guid isPermaLink="true">http://reasonabout.co/meta/2016/02/03/zs-how-to-become-a-super-famous-programmer.html</guid>
        
        <category>Galvanize,</category>
        
        <category>open</category>
        
        <category>source</category>
        
        
        <category>meta</category>
        
      </item>
    
      <item>
        <title>Npm Modules</title>
        <description>&lt;p&gt;There is a first time for everything. This is the story of making and publishing my first npm module. I remember it like it was only a few days ago…&lt;/p&gt;

&lt;h2 id=&quot;notable-preliminary-messages&quot;&gt;Notable Preliminary Messages&lt;/h2&gt;

&lt;p&gt;Npm is a package manager primarily used by applications built on node.js. Npm modules are redistributable pieces of code that can be plugged in to other applications to extend their functionality. For more on what npm is and what it does, visit their &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;negating-preconceived-misconceptions&quot;&gt;Negating Preconceived Misconceptions&lt;/h2&gt;

&lt;p&gt;Because npm is the default package manager for node.js applications, many people think that npm stands for “Node Package Manager”. This is incorrect. In fact, npm is not an acronym. It is a backronym that stands for “npm is not an acronym”. Those who know this often make up random acronyms when asked what npm stands for, such as “Nautical Pirate Marauders”.&lt;/p&gt;

&lt;h2 id=&quot;nuanced-portfolio-motivation&quot;&gt;Nuanced Portfolio Motivation&lt;/h2&gt;

&lt;p&gt;Early on in my time going through Galvanize’s full stack web development program (coding bootcamp), I decided I wanted to publish an npm module before the course ended. In absence of an idea for a truly &lt;em&gt;useful&lt;/em&gt; piece of modular code, I figured I would write a truly &lt;em&gt;useless&lt;/em&gt; one. The result was  &lt;a href=&quot;https://www.npmjs.com/package/debunk&quot;&gt;DeBunk&lt;/a&gt;. The idea was simple: write a small amount of useless code accompanied by excessive documentation that heralds its importance. It was silly. I expected to have a few laughs about it and move on. What I didn’t expect was that some of my classmates would want to join in on the fun (perhaps due to me threatening them if they didn’t).&lt;/p&gt;

&lt;h2 id=&quot;communal-repository-management&quot;&gt;commuNal rePository manageMent&lt;/h2&gt;

&lt;p&gt;My module’s code is open source on &lt;a href=&quot;https://www.github.com/skuttleman/debunk&quot;&gt;github&lt;/a&gt;, and some of my friends submitted contributions to the repository to add similarly useless lines of code. Each of them made me laugh, and I hope they had as much fun contributing them as I had making the module. My favorite of these, was the following:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;js
doesItEqualThree: function(input){
  if(input === 3) {
    return &quot;yes&quot;;
  } else {
    return &quot;no&quot;;
  }
},
doesItEqualSeventeen: function(input){
  if(input === 17) {
    return &quot;yes&quot;;
  } else {
    return &quot;no&quot;;
  }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What makes this contribution particularly enjoyable is not how useless it is - though it is remarkably useless -, but rather what happened next.
A few minutes after this was merged into DeBunk, the following module was posted by the author of the code above in response to itself:  &lt;a href=&quot;https://www.npmjs.com/package/destupidify&quot;&gt;Destupidify&lt;/a&gt;. Oh, the layers. I laughed for years. I have the best friends.&lt;/p&gt;

&lt;h2 id=&quot;npm-publishing-memoirs&quot;&gt;Npm Publishing Memoirs&lt;/h2&gt;

&lt;p&gt;Publishing a module to npm is super easy, and doesn’t have to be an epic undertaking. It doesn’t even have to be useful for anything other than a few laughs. For more on publishing to npm, visit their &lt;a href=&quot;https://docs.npmjs.com/getting-started/publishing-npm-packages&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By &lt;a href=&quot;https://www.github.com/skuttleman&quot;&gt;Ben Allred&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 00:00:00 -0700</pubDate>
        <link>http://reasonabout.co/coding/2016/02/02/bda-npm-modules.html</link>
        <guid isPermaLink="true">http://reasonabout.co/coding/2016/02/02/bda-npm-modules.html</guid>
        
        <category>npm</category>
        
        <category>javascript</category>
        
        <category>open source</category>
        
        
        <category>coding</category>
        
      </item>
    
  </channel>
</rss>
